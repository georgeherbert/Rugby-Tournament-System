# BytesIO allows a PDF to be generated by temporarily storing the PDF in memory, as opposed to having to create a file in secondary storage
from io import BytesIO

# HttpResponse generates an HTTP response
from django.http import HttpResponse

# get_template loads a template and returns a template object
from django.template.loader import get_template

# pisa converts HTML code to a PDF document
from xhtml2pdf import pisa

# Takes a tournament and produces the PDF document associated with it
def renderToPDF(tournament):
    # Renders the template for a specific tournament and holds the html code
    template = get_template("tournament/PDF.html")
    html  = template.render({
        "tournament": tournament
    })

    # Will hold the bytes that make up the PDF document
    result = BytesIO()

    # Encodes the HTML code, converts it to a PDF and stores it in result
    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)

    # Returns the PDF document
    return result.getvalue()
